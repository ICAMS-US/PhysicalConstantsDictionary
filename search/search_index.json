{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Physical Constants Dictionary (PCD) Documentation","text":"<p>This page provides up-to-date documentation of the features for the community-based Physical Constant Dictionary (PCD).</p> <p>Please contribute to it by opening an issue or pull request.</p> <p>Preliminary syntax rules for the YAML dictionary file are provided in Dictionary Syntax.</p> <p>An introductory guide to the CPCD parser is available in The CPCD Parser.</p>"},{"location":"#documentation-pages","title":"Documentation Pages","text":"<ul> <li>Dictionary Syntax - YAML syntax rules for the physical constants dictionary</li> <li>The CPCD Parser - Guide to building and using the Community Physical Constant Dictionary parser</li> </ul>"},{"location":"cpcd-parser/","title":"The CPCD Parser","text":"<p>The Community Physical Constant Dictionary (CPCD) parser is a command-line tool that allow users to lookup physical constants in the YAML dictionary file and include them in their code by generating a suitable source file.</p>"},{"location":"cpcd-parser/#requirements","title":"Requirements","text":"<p>The CPCD parser requires: - The yaml-cpp library (version 0.6.2 or later), an open-source YAML parser and emitter written in C++ that supports YAML version 1.2 - A C++ compiler supporting the C++11 standard</p>"},{"location":"cpcd-parser/#installation","title":"Installation","text":"<p>At this time, the CPCD parser is distributed within the same repository as the Community Physical Constant Dictionary in the <code>tools/</code> directory, under a GNU General Public License (GPL).</p>"},{"location":"cpcd-parser/#getting-the-source-code","title":"Getting the Source Code","text":"<p>The source code can be downloaded as follows:</p> <pre><code>git clone https://github.com/ESCOMP/PhysicalConstantsDictionary.git\n</code></pre>"},{"location":"cpcd-parser/#installing-yaml-cpp","title":"Installing yaml-cpp","text":"<p>The yaml-cpp library uses CMake to support cross-platform building. A custom distribution for the yaml-cpp library (version 0.6.2) using the standard GNU build system is available here.</p> <p>To download and build yaml-cpp, follow these steps:</p> <pre><code>git clone -b gnu_autotools https://github.com/NESII/yaml-cpp.git\ncd yaml-cpp\n./configure --prefix=&lt;your_yamlcpp_installation_path&gt;\nmake\nmake install\n</code></pre>"},{"location":"cpcd-parser/#building-the-cpcd-parser","title":"Building the CPCD parser","text":"<p>The CPCD parser uses a standard GNU build system. To build this package on a given platform, the configure script needs to be run first:</p> <pre><code>./configure\n</code></pre> <p>This script will look for a suitable compiler (supporting C++11), then attempt to find the yaml-cpp library. The library's installation path can be provided to configure via:</p> <ol> <li>The <code>YAML_CPP</code> environment variable, set after loading the corresponding yaml-cpp module in common installations</li> <li>The <code>--with-yamlcpp</code> configure option, e.g.:</li> </ol> <pre><code>./configure --with-yamlcpp=/usr/local/yaml-cpp/0.6.2\n</code></pre> <p>The configure script also allows to set the installation path for the CPCP parser:</p> <pre><code>./configure --prefix=/usr/local/cpcd\n</code></pre> <p>A complete list of configure options can be obtained by typing:</p> <pre><code>./configure --help\n</code></pre> <p>Once configure completes successfully, the CPCD parser can be built by typing:</p> <pre><code>make\n</code></pre> <p>and installed as:</p> <pre><code>make install\n</code></pre> <p>The last step will install the <code>cpcd</code> executable under the <code>bin/</code> subdirectory of your installation path, e.g.: <code>/usr/local/cpcd/bin/cpcd</code>.</p>"},{"location":"cpcd-parser/#running-the-cpcd-parser","title":"Running the CPCD parser","text":"<p>The CPCD parser provides a command-line interface and can be driven through multiple options. A full list of options can be obtained by running <code>cpcd</code> with no options, or as <code>cpcd --help</code>:</p> <pre><code>$ ./src/cpcd --help\nUsage: cpcd [options] ...\nMain tool to validate, parse, and extract physical constant sets from the Community Physical Constant Dictionary\n\nMandatory arguments to long options are mandatory for short options too.\n  -d, --dictionary YAML_FILE    Use YAML_FILE as dictionary\n  -r, --request YAML_FILE       Extract constants listed in YAML_FILE\n  -o, --output FILE             Save Fortran output to FILE\n  -x, --validate                Validate dictionary file before proceeding\n  -v, --verbose                 Use verbose output\n  -V, --version                 Print version information\n  -h, --help                    Display available options\n\nExit status: 0 if successful, 1 if an error occurs.\nFor bugs reporting, please visit: &lt;https://github.com/ESCOMP/PhysicalConstantsDictionary&gt;\n</code></pre>"},{"location":"cpcd-parser/#request-file-format","title":"Request File Format","text":"<p>A collection of physical constants to be extracted from the dictionary is provided to the CPCD parser also in a YAML file. A sample file (<code>req.yaml</code>) is distributed with this package in the <code>cpcd/test/</code> directory. Its content is included below:</p> <pre><code># This is an example of a user-requested list of physical constants\n# to be looked up in the dictionary by the CPCD parser and included\n# in the generated source code.\n\nASHandbook1964: [ pi, gamma ]\n\nCODATA2014:\n  - standard_acceleration_of_gravity\n  - speed_of_light_in_vacuum\n  - stefan_boltzmann_constant\n\nGRS80: mean_radius\n\nIAPWS1995: [ liquid_water_triple_point_density, vapor_water_triple_point_density ]\n\nASHandbook1964: square_root_of_2\nASHandbook1964: pi\n</code></pre>"},{"location":"cpcd-parser/#example-usage","title":"Example Usage","text":"<p>When the file above is provided to <code>cpcd</code> via option <code>-r</code>, the CPCD parser will output a source file that can be added to a model source code. Fortran is the only output language currently supported by the CPCD parser.</p> <p>The following command:</p> <pre><code>$ cpcd -d pcd.yaml -r req.yaml\n</code></pre> <p>will generate the Fortran module file <code>cpcd_mod.F90</code> in the current directory. This file will contain the extracted physical constants as Fortran parameters, declared by default as double precision:</p> <pre><code>module cpcd\n  integer, parameter :: cpcd_kind = kind(1.d0)\n\n  ! - from set ASHandbook1964\n  real(cpcd_kind), parameter :: ASHandbook1964_pi = 3.141592653589793238462643_cpcd_kind\n  real(cpcd_kind), parameter :: ASHandbook1964_gamma = 0.577215664901532860606512_cpcd_kind\n  real(cpcd_kind), parameter :: ASHandbook1964_square_root_of_2 = 1.4142135623730950488_cpcd_kind\n\n  ! - from set CODATA2014\n  real(cpcd_kind), parameter :: CODATA2014_speed_of_light_in_vacuum = 299792458_cpcd_kind\n  real(cpcd_kind), parameter :: CODATA2014_standard_acceleration_of_gravity = 9.80665_cpcd_kind\n  real(cpcd_kind), parameter :: CODATA2014_stefan_boltzmann_constant = 5.67036713E-08_cpcd_kind\n\n  ! - from set GRS80\n  real(cpcd_kind), parameter :: GRS80_mean_radius = 6371008.7714_cpcd_kind\n\n  ! - from set IAPWS1995\n  real(cpcd_kind), parameter :: IAPWS1995_liquid_water_triple_point_density = 999.793_cpcd_kind\n  real(cpcd_kind), parameter :: IAPWS1995_vapor_water_triple_point_density = 0.00485458_cpcd_kind\n\nend module cpcd\n</code></pre>"},{"location":"dictionary-syntax/","title":"Dictionary Syntax","text":"<p>The Physical Constants Dictionary (PCD) is codified in YAML 1.2.</p> <p>The content of such YAML file must comply with the current syntax rules:</p>"},{"location":"dictionary-syntax/#main-structure","title":"Main Structure","text":"<p>A PCD is a YAML node of kind mappings, i.e. an unordered set of key: value node pairs, with the unique key name <code>physical_constants_dictionary</code>.</p> <pre><code>physical_constants_dictionary:\n  # Dictionary content goes here\n</code></pre>"},{"location":"dictionary-syntax/#top-level-fields","title":"Top-Level Fields","text":"<p>The value associated to the <code>physical_constants_dictionary</code> key consists of the following YAML mapping nodes:</p>"},{"location":"dictionary-syntax/#version_number-optional","title":"version_number (optional)","text":"<p>The dictionary version, as in the standard GNU scheme: major.minor.revision</p>"},{"location":"dictionary-syntax/#institution-optional","title":"institution (optional)","text":"<p>The name of the institution responsible for the dictionary</p>"},{"location":"dictionary-syntax/#description-optional","title":"description (optional)","text":"<p>A short description of the dictionary file</p>"},{"location":"dictionary-syntax/#contact-optional","title":"contact (optional)","text":"<p>The email address of the designed POC for this file</p>"},{"location":"dictionary-syntax/#set-mandatory","title":"set (mandatory)","text":"<p>Internally consistent physical constants sets are included as YAML block sequences of mappings. A physical constant set is codified as a YAML mapping node, with the set name as the main key. Each set must begin with a hyphen (-), separated by space from the set name (key).</p>"},{"location":"dictionary-syntax/#physical-constants-sets","title":"Physical Constants Sets","text":"<p>The value associated to a set key includes the following mapping nodes:</p>"},{"location":"dictionary-syntax/#description-mandatory","title":"description (mandatory)","text":"<p>A brief description of the constants set</p>"},{"location":"dictionary-syntax/#citation-mandatory","title":"citation (mandatory)","text":"<p>Literature references associated with the set</p>"},{"location":"dictionary-syntax/#entries","title":"entries","text":"<p>This node includes the actual dictionary entries for each physical constant included in the set. Entries are also organized as block sequences of mapping nodes, and must begin with a hyphen (-).</p>"},{"location":"dictionary-syntax/#physical-constant-entry-format","title":"Physical Constant Entry Format","text":"<p>A physical constant entry can be defined as shown in the example below:</p> <pre><code>- name: standard_acceleration_of_gravity\n  value: 9.80665\n  units: m s-2\n  prec: double\n  type: strict\n  uncertainty: exact\n  description: |\n    Nominal acceleration of an object in a vacuum at sea level at a\n    geodetic latitude of 45 degrees.\n</code></pre>"},{"location":"dictionary-syntax/#entry-field-definitions","title":"Entry Field Definitions","text":"<p>The name of each key and its associated value are listed below:</p>"},{"location":"dictionary-syntax/#name","title":"name","text":"<p>Physical constant's standard name</p>"},{"location":"dictionary-syntax/#value","title":"value","text":"<p>Physical constant's numerical value</p>"},{"location":"dictionary-syntax/#units","title":"units","text":"<p>Physical constant's units</p>"},{"location":"dictionary-syntax/#prec","title":"prec","text":"<p><code>single</code> (4 bytes) or <code>double</code> (8 bytes) indicate the parameter's kind in Fortran</p>"},{"location":"dictionary-syntax/#uncertainty-optional","title":"uncertainty (optional)","text":"<p>The constant's absolute uncertainty (a number, or <code>exact</code>)</p>"},{"location":"dictionary-syntax/#relative_uncertainty-optional","title":"relative_uncertainty (optional)","text":"<p>The constant's relative uncertainty (a number, or <code>exact</code>)</p>"},{"location":"dictionary-syntax/#description","title":"description","text":"<p>A detailed description of the physical constant, with additional references if necessary.</p>"}]}